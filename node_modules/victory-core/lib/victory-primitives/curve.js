Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign2 = require("lodash/assign");

var _assign3 = _interopRequireDefault(_assign2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helpers = require("../victory-util/helpers");

var _helpers2 = _interopRequireDefault(_helpers);

var _helpers3 = require("./helpers");

var _d3Shape = require("d3-shape");

var d3Shape = _interopRequireWildcard(_d3Shape);

var _commonProps = require("./common-props");

var _commonProps2 = _interopRequireDefault(_commonProps);

var _path = require("./path");

var _path2 = _interopRequireDefault(_path);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*eslint no-magic-numbers: ["error", { "ignore": [-1, 0, 1, 2] }]*/


var Curve = function (_React$Component) {
  _inherits(Curve, _React$Component);

  function Curve() {
    _classCallCheck(this, Curve);

    return _possibleConstructorReturn(this, (Curve.__proto__ || Object.getPrototypeOf(Curve)).apply(this, arguments));
  }

  _createClass(Curve, [{
    key: "getLineFunction",
    value: function getLineFunction(props) {
      var polar = props.polar,
          scale = props.scale,
          openCurve = props.openCurve;

      var interpolation = polar && !openCurve ? this.toNewName(props.interpolation) + "Closed" : this.toNewName(props.interpolation);
      return polar ? d3Shape.lineRadial().defined(_helpers3.defined).curve(d3Shape[interpolation]).angle((0, _helpers3.getAngleAccessor)(scale)).radius((0, _helpers3.getYAccessor)(scale)) : d3Shape.line().defined(_helpers3.defined).curve(d3Shape[interpolation]).x((0, _helpers3.getXAccessor)(scale)).y((0, _helpers3.getYAccessor)(scale));
    }
  }, {
    key: "toNewName",
    value: function toNewName(interpolation) {
      // d3 shape changed the naming scheme for interpolators from "basis" -> "curveBasis" etc.
      var capitalize = function (s) {
        return s && s[0].toUpperCase() + s.slice(1);
      };
      return "curve" + capitalize(interpolation);
    }
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          data = _props.data,
          active = _props.active,
          events = _props.events,
          role = _props.role,
          shapeRendering = _props.shapeRendering,
          className = _props.className,
          polar = _props.polar,
          origin = _props.origin,
          pathComponent = _props.pathComponent;

      var style = _helpers2.default.evaluateStyle((0, _assign3.default)({ fill: "none", stroke: "black" }, this.props.style), data, active);
      var lineFunction = this.getLineFunction(this.props);
      var path = lineFunction(data);
      var transform = polar && origin ? "translate(" + origin.x + ", " + origin.y + ")" : undefined;
      return _react2.default.cloneElement(pathComponent, {
        className: className, style: style, role: role, shapeRendering: shapeRendering, transform: transform, events: events, d: path
      });
    }
  }]);

  return Curve;
}(_react2.default.Component);

Curve.propTypes = _extends({}, _commonProps2.default, {
  interpolation: _propTypes2.default.string,
  openCurve: _propTypes2.default.bool,
  origin: _propTypes2.default.object,
  pathComponent: _propTypes2.default.element,
  polar: _propTypes2.default.bool
});
Curve.defaultProps = {
  pathComponent: _react2.default.createElement(_path2.default, null)
};
exports.default = Curve;