Object.defineProperty(exports, "__esModule", {
  value: true
});

var _sortBy2 = require("lodash/sortBy");

var _sortBy3 = _interopRequireDefault(_sortBy2);

var _property2 = require("lodash/property");

var _property3 = _interopRequireDefault(_property2);

var _isFunction2 = require("lodash/isFunction");

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _last2 = require("lodash/last");

var _last3 = _interopRequireDefault(_last2);

var _range2 = require("lodash/range");

var _range3 = _interopRequireDefault(_range2);

var _uniq2 = require("lodash/uniq");

var _uniq3 = _interopRequireDefault(_uniq2);

var _assign2 = require("lodash/assign");

var _assign3 = _interopRequireDefault(_assign2);

var _helpers = require("./helpers");

var _helpers2 = _interopRequireDefault(_helpers);

var _collection = require("./collection");

var _collection2 = _interopRequireDefault(_collection);

var _scale = require("./scale");

var _scale2 = _interopRequireDefault(_scale);

var _immutable = require("./immutable");

var _immutable2 = _interopRequireDefault(_immutable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

exports.default = {
  // Some keys in each data point need to be converted to plain js
  immutableDatumWhitelist: {
    errorX: true,
    errorY: true
  },

  /**
   * Returns an array of formatted data
   * @param {Object} props: the props object
   * @returns {Array} an array of data
   */
  getData: function (props) {
    var data = void 0;
    if (props.data) {
      if (this.getLength(props.data) < 1) {
        return [];
      } else {
        data = this.formatData(props.data, props);
      }
    } else {
      data = this.formatData(this.generateData(props), props);
    }
    return this.addEventKeys(props, data);
  },


  /**
   * Returns generated data for a given axis based on domain and sample from props
   * @param {Object} props: the props object
   * @param {String} axis: the current axis
   * @returns {Array} an array of data
   */
  generateDataArray: function (props, axis) {
    var propsDomain = props.domain && Array.isArray(props.domain) ? props.domain : props.domain && props.domain[axis];
    var domain = propsDomain || _scale2.default.getBaseScale(props, axis).domain();
    var samples = props.samples || 1;
    var domainMax = Math.max.apply(Math, _toConsumableArray(domain));
    var domainMin = Math.min.apply(Math, _toConsumableArray(domain));
    var step = (domainMax - domainMin) / samples;
    var values = (0, _range3.default)(domainMin, domainMax, step);
    return (0, _last3.default)(values) === domainMax ? values : values.concat(domainMax);
  },


  /**
   * Returns generated x and y data based on domain and sample from props
   * @param {Object} props: the props object
   * @returns {Array} an array of data
   */
  generateData: function (props) {
    var xValues = this.generateDataArray(props, "x");
    var yValues = this.generateDataArray(props, "y");
    var values = xValues.map(function (x, i) {
      return { x: x, y: yValues[i] };
    });
    return values;
  },


  /**
   * Returns formatted data. Data accessors are applied, and string values are replaced.
   * @param {Array} dataset: the original domain
   * @param {Object} props: the props object
   * @param {Object} stringMap: a mapping of string values to numeric values
   * @returns {Array} the formatted data
   */
  formatData: function (dataset, props, stringMap) {
    var _this = this;

    var isArrayOrIterable = Array.isArray(dataset) || _immutable2.default.isIterable(dataset);
    if (!isArrayOrIterable) {
      return [];
    }

    stringMap = stringMap || {
      x: this.createStringMap(props, "x"),
      y: this.createStringMap(props, "y")
    };

    var accessor = {
      x: _helpers2.default.createAccessor(props.x !== undefined ? props.x : "x"),
      y: _helpers2.default.createAccessor(props.y !== undefined ? props.y : "y"),
      y0: _helpers2.default.createAccessor(props.y0 !== undefined ? props.y0 : "y0")
    };

    var data = dataset.reduce(function (dataArr, datum, index) {
      // eslint-disable-line complexity
      datum = _this.parseDatum(datum);

      var evaluatedX = datum._x !== undefined ? datum._x : accessor.x(datum);
      var evaluatedY = datum._y !== undefined ? datum._y : accessor.y(datum);
      var y0 = datum._y0 !== undefined ? datum._y0 : accessor.y0(datum);
      var x = evaluatedX !== undefined ? evaluatedX : index;
      var y = evaluatedY !== undefined ? evaluatedY : datum;
      var originalValues = y0 === undefined ? { x: x, y: y } : { x: x, y: y, y0: y0 };
      var privateValues = y0 === undefined ? { _x: x, _y: y } : { _x: x, _y: y, _y0: y0 };

      dataArr.push((0, _assign3.default)(originalValues, datum, privateValues,
      // map string data to numeric values, and add names
      typeof x === "string" ? { _x: stringMap.x[x], xName: x } : {}, typeof y === "string" ? { _y: stringMap.y[y], yName: y } : {}, typeof y0 === "string" ? { _y0: stringMap.y[y0], yName: y0 } : {}));

      return dataArr;
    }, []);

    var sortedData = this.sortData(data, props.sortKey, props.sortOrder);

    return this.cleanData(sortedData, props);
  },


  /**
   * Returns sorted data. If no sort keys are provided, data is returned unaltered.
   * Sort key should correspond to the `iteratees` argument in lodash `sortBy` function.
   * @param {Array} dataset: the original dataset
   * @param {mixed} sortKey: the sort key. Type is whatever lodash permits for `sortBy`
   * @param {String} sortOrder: the sort Order - `ascending` (default) or `descending`
   * @returns {Array} the sorted data
   */
  sortData: function (dataset, sortKey) {
    var sortOrder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ascending";

    if (!sortKey) {
      return dataset;
    }

    // Ensures previous VictoryLine api for sortKey prop stays consistent
    if (sortKey === "x" || sortKey === "y") {
      sortKey = "_" + sortKey;
    }

    var sortedData = (0, _sortBy3.default)(dataset, sortKey);

    if (sortOrder === "descending") {
      return sortedData.reverse();
    }

    return sortedData;
  },


  /**
   * Returns the cleaned data. Some scale types break when certain data is supplied.
   * This method will remove data points that break certain scales. So far this method
   * only removes zeroes for log scales
   * @param {Array} dataset: the original domain
   * @param {Object} props: the props object
   * @returns {Array} the cleaned data
   */
  cleanData: function (dataset, props) {
    var scaleType = {
      x: _scale2.default.getScaleType(props, "x"),
      y: _scale2.default.getScaleType(props, "y")
    };
    if (scaleType.x !== "log" && scaleType.y !== "log") {
      return dataset;
    }
    var rules = function (datum, axis) {
      return scaleType[axis] === "log" ? datum["_" + axis] !== 0 : true;
    };
    return dataset.filter(function (datum) {
      return rules(datum, "x") && rules(datum, "y") && rules(datum, "y0");
    });
  },


  // Returns a data accessor given an eventKey prop
  getEventKey: function (key) {
    // creates a data accessor function
    // given a property key, path, array index, or null for identity.
    if ((0, _isFunction3.default)(key)) {
      return key;
    } else if (key === null || typeof key === "undefined") {
      return function () {
        return undefined;
      };
    }
    // otherwise, assume it is an array index, property key or path (_.property handles all three)
    return (0, _property3.default)(key);
  },


  // Returns data with an eventKey prop added to each datum
  addEventKeys: function (props, data) {
    var eventKeyAccessor = this.getEventKey(props.eventKey);
    return data.map(function (datum, index) {
      var eventKey = datum.eventKey || eventKeyAccessor(datum) || index;
      return (0, _assign3.default)({ eventKey: eventKey }, datum);
    });
  },


  /**
   * Returns an object mapping string data to numeric data
   * @param {Object} props: the props object
   * @param {String} axis: the current axis
   * @returns {Object} an object mapping string data to numeric data
   */
  createStringMap: function (props, axis) {
    var stringsFromAxes = this.getStringsFromAxes(props, axis);
    var stringsFromCategories = this.getStringsFromCategories(props, axis);
    var stringsFromData = this.getStringsFromData(props, axis);

    var allStrings = (0, _uniq3.default)([].concat(_toConsumableArray(stringsFromAxes), _toConsumableArray(stringsFromCategories), _toConsumableArray(stringsFromData)));
    return allStrings.length === 0 ? null : allStrings.reduce(function (memo, string, index) {
      memo[string] = index + 1;
      return memo;
    }, {});
  },


  /**
   * Returns an array of strings from data
   * @param {Object} props: the props object
   * @param {String} axis: the current axis
   * @returns {Array} an array of strings
   */
  getStringsFromData: function (props, axis) {
    var _this2 = this;

    var isArrayOrIterable = Array.isArray(props.data) || _immutable2.default.isIterable(props.data);
    if (!isArrayOrIterable) {
      return [];
    }

    var key = typeof props[axis] === "undefined" ? axis : props[axis];
    var accessor = _helpers2.default.createAccessor(key);

    var dataStrings = props.data.reduce(function (dataArr, datum) {
      datum = _this2.parseDatum(datum);
      dataArr.push(accessor(datum));
      return dataArr;
    }, []).filter(function (datum) {
      return typeof datum === "string";
    });

    // return a unique set of strings
    return dataStrings.reduce(function (prev, curr) {
      if (typeof curr !== "undefined" && curr !== null && prev.indexOf(curr) === -1) {
        prev.push(curr);
      }
      return prev;
    }, []);
  },


  /**
   * Returns an array of strings from axis tickValues for a given axis
   * @param {Object} props: the props object
   * @param {String} axis: the current axis
   * @returns {Array} an array of strings
   */
  getStringsFromAxes: function (props, axis) {
    var tickValues = props.tickValues,
        tickFormat = props.tickFormat;

    var tickValueArray = void 0;
    if (!tickValues || !Array.isArray(tickValues) && !tickValues[axis]) {
      tickValueArray = tickFormat && Array.isArray(tickFormat) ? tickFormat : [];
    } else {
      tickValueArray = tickValues[axis] || tickValues;
    }
    return tickValueArray.filter(function (val) {
      return typeof val === "string";
    });
  },


  /**
   * Returns an array of strings from categories for a given axis
   * @param {Object} props: the props object
   * @param {String} axis: the current axis
   * @returns {Array} an array of strings
   */
  getStringsFromCategories: function (props, axis) {
    if (!props.categories) {
      return [];
    }
    var categories = this.getCategories(props, axis);
    var categoryStrings = categories && categories.filter(function (val) {
      return typeof val === "string";
    });
    return categoryStrings ? _collection2.default.removeUndefined(categoryStrings) : [];
  },


  /**
   * Returns an array of categories for a given axis
   * @param {Object} props: the props object
   * @param {String} axis: the current axis
   * @returns {Array} an array of categories
   */
  getCategories: function (props, axis) {
    return props.categories && !Array.isArray(props.categories) ? props.categories[axis] : props.categories;
  },


  /**
   * Reduces the size of a data array, such that it is <= maxPoints.
   * @param {Array} data: an array of data; must be sorted
   * @param {Number} maxPoints: maximum number of data points to return
   * @param {Number} startingIndex: the index of the data[0] *in the entire dataset*; this function
                     assumes `data` param is a subset of larger dataset that has been zoommed
   * @returns {Array} an array of data, a subset of data param
   */
  downsample: function (data, maxPoints) {
    var startingIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    // ensures that the downampling of data while zooming looks good.
    var dataLength = this.getLength(data);
    if (dataLength > maxPoints) {
      // limit k to powers of 2, e.g. 64, 128, 256
      // so that the same points will be chosen reliably, reducing flicker on zoom
      var k = Math.pow(2, Math.ceil(Math.log2(dataLength / maxPoints)));
      return data.filter(
      // ensure modulo is always calculated from same reference: i + startingIndex
      function (d, i) {
        return (i + startingIndex) % k === 0;
      });
    }
    return data;
  },
  getLength: function (data) {
    return _immutable2.default.isIterable(data) ? data.size : data.length;
  },
  parseDatum: function (datum) {
    return _immutable2.default.isImmutable(datum) ? _immutable2.default.shallowToJS(datum, this.immutableDatumWhitelist) : datum;
  }
};