import _isFunction from "lodash/isFunction";
import React from "react";

import Data from "./data";
import Collection from "./collection";

export default {
  getParentSVG: function (target) {
    if (target.nodeName === "svg") {
      return target;
    } else {
      return this.getParentSVG(target.parentNode);
    }
  },
  getTransformationMatrix: function (svg) {
    return svg.getScreenCTM().inverse();
  },
  getSVGEventCoordinates: function (evt) {
    if (typeof document === "undefined") {
      // react-native override. relies on the RN.View being the _exact_ same size as its child SVG.
      // this should be fine: the svg is the only child of View and the View shirks to its children
      return {
        x: evt.nativeEvent.locationX,
        y: evt.nativeEvent.locationY
      };
    }
    evt = evt.changedTouches && evt.changedTouches.length ? evt.changedTouches[0] : evt;
    var svg = this.getParentSVG(evt.target);
    var matrix = this.getTransformationMatrix(svg);
    return {
      x: this.transformTarget(evt.clientX, matrix, "x"),
      y: this.transformTarget(evt.clientY, matrix, "y")
    };
  },
  transformTarget: function (target, matrix, dimension) {
    var a = matrix.a,
        d = matrix.d,
        e = matrix.e,
        f = matrix.f;

    return dimension === "y" ? d * target + f : a * target + e;
  },
  getDomainCoordinates: function (props, domain) {
    var scale = props.scale;

    domain = domain || { x: scale.x.domain(), y: scale.y.domain() };
    return {
      x: [scale.x(domain.x[0]), scale.x(domain.x[1])],
      y: [scale.y(domain.y[0]), scale.y(domain.y[1])]
    };
  },


  // eslint-disable-next-line max-params
  getDataCoordinates: function (props, scale, x, y) {
    var polar = props.polar;

    if (!polar) {
      return {
        x: scale.x.invert(x),
        y: scale.y.invert(y)
      };
    } else {
      var origin = props.origin || { x: 0, y: 0 };
      var baseX = x - origin.x;
      var baseY = y - origin.y;
      var radius = Math.abs(baseX * Math.sqrt(1 + Math.pow(-baseY / baseX, 2)));
      var angle = (-Math.atan2(baseY, baseX) + Math.PI * 2) % (Math.PI * 2);
      return {
        x: scale.x.invert(angle),
        y: scale.y.invert(radius)
      };
    }
  },
  getBounds: function (props) {
    var x1 = props.x1,
        x2 = props.x2,
        y1 = props.y1,
        y2 = props.y2,
        scale = props.scale;

    var point1 = this.getDataCoordinates(props, scale, x1, y1);
    var point2 = this.getDataCoordinates(props, scale, x2, y2);
    var makeBound = function (a, b) {
      return [Collection.getMinValue([a, b]), Collection.getMaxValue([a, b])];
    };

    return {
      x: makeBound(point1.x, point2.x),
      y: makeBound(point1.y, point2.y)
    };
  },
  getDatasets: function (props) {
    // eslint-disable-line max-statements
    if (props.data) {
      return [{ data: props.data }];
    }
    var getData = function (childProps) {
      var data = Data.getData(childProps);
      return Array.isArray(data) && data.length > 0 ? data : undefined;
    };

    // Reverse the child array to maintain correct order when looping over
    // children starting from the end of the array.
    var children = React.Children.toArray(props.children).reverse();
    var childrenLength = children.length;
    var dataArr = [];
    var dataArrLength = 0;
    var childIndex = 0;
    while (childrenLength > 0) {
      var child = children[--childrenLength];
      var childName = child.props.name || childIndex;
      childIndex++;
      if (child.type && child.type.role === "axis") {
        childIndex++;
      } else if (child.type && _isFunction(child.type.getData)) {
        dataArr[dataArrLength++] = { childName: childName, data: child.type.getData(child.props) };
      } else if (child.props && child.props.children) {
        var newChildren = React.Children.toArray(child.props.children);
        var newChildrenLength = newChildren.length;
        for (var index = 0; index < newChildrenLength; index++) {
          children[childrenLength++] = newChildren[index];
        }
      } else {
        dataArr[dataArrLength++] = { childName: childName, data: getData(child.props) };
      }
    }
    return dataArr;
  },
  filterDatasets: function (datasets, bounds) {
    var _this = this;

    var filtered = datasets.reduce(function (memo, dataset) {
      var selectedData = _this.getSelectedData(dataset.data, bounds);
      memo = selectedData ? memo.concat({
        childName: dataset.childName, eventKey: selectedData.eventKey, data: selectedData.data
      }) : memo;
      return memo;
    }, []);
    return filtered.length ? filtered : null;
  },
  getSelectedData: function (dataset, bounds) {
    var x = bounds.x,
        y = bounds.y;

    var withinBounds = function (d) {
      return d._x >= x[0] && d._x <= x[1] && d._y >= y[0] && d._y <= y[1];
    };

    var selectedData = dataset.reduce(function (accum, datum, index) {
      if (withinBounds(datum)) {
        accum.data.push(datum);
        accum.eventKey.push(datum.eventKey === undefined ? index : datum.eventKey);
      }

      return accum;
    }, {
      data: [],
      eventKey: []
    });

    return selectedData.data.length > 0 ? selectedData : null;
  }
};