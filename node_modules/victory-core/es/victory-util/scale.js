import _isFunction from "lodash/isFunction";
import _includes from "lodash/includes";

import Helpers from "./helpers";
import Collection from "./collection";
import * as d3Scale from "d3-scale";

var supportedScaleStrings = ["linear", "time", "log", "sqrt"];

export default {
  getDefaultScale: function () {
    return d3Scale.scaleLinear();
  },
  toNewName: function (scale) {
    // d3 scale changed the naming scheme for scale from "linear" -> "scaleLinear" etc.
    var capitalize = function (s) {
      return s && s[0].toUpperCase() + s.slice(1);
    };
    return "scale" + capitalize(scale);
  },
  validScale: function (scale) {
    if (typeof scale === "function") {
      return _isFunction(scale.copy) && _isFunction(scale.domain) && _isFunction(scale.range);
    } else if (typeof scale === "string") {
      return _includes(supportedScaleStrings, scale);
    }
    return false;
  },
  isScaleDefined: function (props, axis) {
    if (!props.scale) {
      return false;
    } else if (props.scale.x || props.scale.y) {
      return props.scale[axis] ? true : false;
    }
    return true;
  },
  getScaleTypeFromProps: function (props, axis) {
    if (!this.isScaleDefined(props, axis)) {
      return undefined;
    }
    var scale = props.scale[axis] || props.scale;
    return typeof scale === "string" ? scale : this.getType(scale);
  },
  getScaleFromProps: function (props, axis) {
    if (!this.isScaleDefined(props, axis)) {
      return undefined;
    }
    var scale = props.scale[axis] || props.scale;

    if (this.validScale(scale)) {
      return _isFunction(scale) ? scale : d3Scale[this.toNewName(scale)]();
    }
    return undefined;
  },
  getScaleFromDomain: function (props, axis) {
    var domain = void 0;
    if (props.domain && props.domain[axis]) {
      domain = props.domain[axis];
    } else if (props.domain && Array.isArray(props.domain)) {
      domain = props.domain;
    }
    if (!domain) {
      return undefined;
    }
    return Collection.containsDates(domain) ? "time" : "linear";
  },
  getScaleTypeFromData: function (props, axis) {
    if (!props.data) {
      return "linear";
    }
    var accessor = Helpers.createAccessor(props[axis]);
    var axisData = props.data.map(accessor);
    return Collection.containsDates(axisData) ? "time" : "linear";
  },
  getBaseScale: function (props, axis) {
    var scale = this.getScaleFromProps(props, axis);
    if (scale) {
      return scale;
    }
    var defaultScale = this.getScaleFromDomain(props, axis) || this.getScaleTypeFromData(props, axis);
    return d3Scale[this.toNewName(defaultScale)]();
  },
  getType: function (scale) {
    var duckTypes = [{ name: "log", method: "base" }, { name: "ordinal", method: "unknown" }, { name: "pow-sqrt", method: "exponent" }, { name: "quantile", method: "quantiles" }, { name: "quantize-threshold", method: "invertExtent" }];
    var scaleType = duckTypes.filter(function (type) {
      return scale[type.method] !== undefined;
    })[0];
    return scaleType ? scaleType.name : undefined;
  },
  getScaleType: function (props, axis) {
    // if the scale was not given in props, it will be set to linear or time depending on data
    return this.getScaleTypeFromProps(props, axis) || this.getScaleTypeFromData(props, axis);
  }
};