function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

import isEqual from "react-fast-compare";

export default {
  isNonEmptyArray: function (collection) {
    return Array.isArray(collection) && collection.length > 0;
  },
  containsStrings: function (collection) {
    return Array.isArray(collection) && collection.some(function (value) {
      return typeof value === "string";
    });
  },
  containsDates: function (collection) {
    return Array.isArray(collection) && collection.some(function (value) {
      return value instanceof Date;
    });
  },
  containsNumbers: function (collection) {
    return Array.isArray(collection) && collection.some(function (value) {
      return typeof value === "number";
    });
  },
  containsOnlyStrings: function (collection) {
    return this.isNonEmptyArray(collection) && collection.every(function (value) {
      return typeof value === "string";
    });
  },
  isArrayOfArrays: function (collection) {
    return this.isNonEmptyArray(collection) && collection.every(Array.isArray);
  },
  removeUndefined: function (arr) {
    return arr.filter(function (el) {
      return typeof el !== "undefined";
    });
  },
  getMaxValue: function (arr) {
    for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      values[_key - 1] = arguments[_key];
    }

    var array = arr.concat(values);
    return this.containsDates(array) ? new Date(Math.max.apply(Math, _toConsumableArray(array))) : Math.max.apply(Math, _toConsumableArray(array));
  },
  getMinValue: function (arr) {
    for (var _len2 = arguments.length, values = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      values[_key2 - 1] = arguments[_key2];
    }

    var array = arr.concat(values);
    return this.containsDates(array) ? new Date(Math.min.apply(Math, _toConsumableArray(array))) : Math.min.apply(Math, _toConsumableArray(array));
  },


  /**
   * Split array into subarrays using a delimiter function. Items qualifying as
   * delimiters are excluded from the subarrays. Functions similarly to String.split
   *
   * Example:
   * const array = [1, 2, 3, "omit", 4, 5, "omit", 6]
   * splitArray(array, (item) => item === "omit");
   * => [[1, 2, 3], [4, 5], [6]]
   *
   * @param {Array}    array        An array of items
   * @param {Function} delimiterFn  A function indicating values to be used as delimiters
   * @returns {Object}              Array of subarrays
   */
  splitArray: function (array, delimiterFn) {
    var segmentStartIndex = 0;
    var segments = array.reduce(function (memo, item, index) {
      if (delimiterFn(item)) {
        memo = memo.concat([array.slice(segmentStartIndex, index)]);
        segmentStartIndex = index + 1;
      } else if (index === array.length - 1) {
        memo = memo.concat([array.slice(segmentStartIndex, array.length)]);
      }
      return memo;
    }, []);

    return segments.filter(function (segment) {
      return Array.isArray(segment) && segment.length > 0;
    });
  },


  /**
   * Takes an array of arrays. Returns whether each subarray has equivalent items.
   * Each subarray should have two items. Used for componentShouldUpdate functions.
   *
   * Example:
   * const propComparisons = [
   *   [x, nextProps.x],
   *   [y, nextProps.y],
   *   [style, this.style]
   * ];
   *
   * allSetsEqual(propComparisons);
   * => true
   *
   * @param {Array}    itemSets     An array of item sets
   * @returns {Boolean}             Whether all item comparisons are equal
   */
  allSetsEqual: function (itemSets) {
    return itemSets.every(function (comparisonSet) {
      return isEqual(comparisonSet[0], comparisonSet[1]);
    });
  },


  /*
  `areVictoryPropsEqual` does the following:
    - marks any two Functions as equal
    - returns false when checking the equality of things like `1` vs. `Object(1)`
    (see the tests for more specifics)
  */
  areVictoryPropsEqual: function (a, b) {
    return isEqual(a, b);
  }
};