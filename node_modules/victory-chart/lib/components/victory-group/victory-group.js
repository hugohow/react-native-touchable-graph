Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defaults2 = require("lodash/defaults");

var _defaults3 = _interopRequireDefault(_defaults2);

var _assign2 = require("lodash/assign");

var _assign3 = _interopRequireDefault(_assign2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _victoryCore = require("victory-core");

var _wrapper = require("../../helpers/wrapper");

var _wrapper2 = _interopRequireDefault(_wrapper);

var _commonProps = require("../../helpers/common-props");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var fallbackProps = {
  width: 450,
  height: 300,
  padding: 50,
  offset: 0
};

var VictoryGroup = function (_React$Component) {
  _inherits(VictoryGroup, _React$Component);

  function VictoryGroup(props) {
    _classCallCheck(this, VictoryGroup);

    var _this = _possibleConstructorReturn(this, (VictoryGroup.__proto__ || Object.getPrototypeOf(VictoryGroup)).call(this, props));

    if (props.animate) {
      _this.state = {
        nodesShouldLoad: false,
        nodesDoneLoad: false,
        animating: true
      };
      _this.setAnimationState = _wrapper2.default.setAnimationState.bind(_this);
      _this.events = _wrapper2.default.getAllEvents(props);
    }
    return _this;
  }

  _createClass(VictoryGroup, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.events = _wrapper2.default.getAllEvents(this.props);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.animate) {
        this.setAnimationState(this.props, nextProps);
      }
      this.events = _wrapper2.default.getAllEvents(nextProps);
    }

    // eslint-disable-next-line max-statements

  }, {
    key: "getCalculatedProps",
    value: function getCalculatedProps(props, childComponents) {
      var role = this.constructor.role;

      var style = this.getStyle(props.theme, props.style, role);
      var modifiedProps = _victoryCore.Helpers.modifyProps(props, fallbackProps);
      var offset = modifiedProps.offset,
          colorScale = modifiedProps.colorScale,
          color = modifiedProps.color,
          polar = modifiedProps.polar;

      var horizontal = modifiedProps.horizontal || childComponents.every(function (component) {
        return component.props && component.props.horizontal;
      });
      var datasets = _wrapper2.default.getDataFromChildren(modifiedProps);
      var domain = {
        x: _wrapper2.default.getDomain(modifiedProps, "x", childComponents),
        y: _wrapper2.default.getDomain(modifiedProps, "y", childComponents)
      };
      var range = {
        x: _victoryCore.Helpers.getRange(modifiedProps, "x"),
        y: _victoryCore.Helpers.getRange(modifiedProps, "y")
      };
      var baseScale = {
        x: _victoryCore.Scale.getScaleFromProps(modifiedProps, "x") || _victoryCore.Scale.getDefaultScale(),
        y: _victoryCore.Scale.getScaleFromProps(modifiedProps, "y") || _victoryCore.Scale.getDefaultScale()
      };
      var xScale = baseScale.x.domain(domain.x).range(range.x);
      var yScale = baseScale.y.domain(domain.y).range(range.y);
      var scale = {
        x: horizontal ? yScale : xScale,
        y: horizontal ? xScale : yScale
      };
      var categories = {
        x: _wrapper2.default.getCategories(modifiedProps, "x"),
        y: _wrapper2.default.getCategories(modifiedProps, "y")
      };
      var origin = polar ? props.origin : _victoryCore.Helpers.getPolarOrigin(modifiedProps);
      var padding = _victoryCore.Helpers.getPadding(props);
      return {
        datasets: datasets, categories: categories, range: range, domain: domain, horizontal: horizontal,
        scale: scale, style: style, colorScale: colorScale, color: color, offset: offset, origin: origin, padding: padding
      };
    }
  }, {
    key: "pixelsToValue",
    value: function pixelsToValue(props, axis, calculatedProps) {
      if (!props.offset) {
        return 0;
      }
      var childComponents = _react2.default.Children.toArray(props.children);
      var horizontalChildren = childComponents.some(function (child) {
        return child.props.horizontal;
      });
      var horizontal = props && props.horizontal || horizontalChildren.length > 0;
      var currentAxis = _victoryCore.Helpers.getCurrentAxis(axis, horizontal);
      var domain = calculatedProps.domain[currentAxis];
      var range = calculatedProps.range[currentAxis];
      var domainExtent = Math.max.apply(Math, _toConsumableArray(domain)) - Math.min.apply(Math, _toConsumableArray(domain));
      var rangeExtent = Math.max.apply(Math, _toConsumableArray(range)) - Math.min.apply(Math, _toConsumableArray(range));
      return domainExtent / rangeExtent * props.offset;
    }
  }, {
    key: "getX0",
    value: function getX0(props, calculatedProps, index) {
      var center = (calculatedProps.datasets.length - 1) / 2;
      var totalWidth = this.pixelsToValue(props, "x", calculatedProps);
      return (index - center) * totalWidth;
    }
  }, {
    key: "getPolarX0",
    value: function getPolarX0(props, calculatedProps, index) {
      var center = (calculatedProps.datasets.length - 1) / 2;
      var width = this.getAngularWidth(props, calculatedProps);
      return (index - center) * width;
    }
  }, {
    key: "getAngularWidth",
    value: function getAngularWidth(props, calculatedProps) {
      var range = calculatedProps.range;

      var angularRange = Math.abs(range.x[1] - range.x[0]);
      var r = Math.max.apply(Math, _toConsumableArray(range.y));
      return props.offset / (2 * Math.PI * r) * angularRange;
    }
  }, {
    key: "getLabels",
    value: function getLabels(props, datasets, index) {
      if (!props.labels) {
        return undefined;
      }
      return Math.floor(datasets.length / 2) === index ? props.labels : undefined;
    }
  }, {
    key: "getChildProps",
    value: function getChildProps(props, calculatedProps) {
      var categories = calculatedProps.categories,
          domain = calculatedProps.domain,
          range = calculatedProps.range,
          scale = calculatedProps.scale,
          horizontal = calculatedProps.horizontal,
          origin = calculatedProps.origin,
          padding = calculatedProps.padding;
      var width = props.width,
          height = props.height,
          theme = props.theme,
          polar = props.polar;

      return {
        height: height, width: width, theme: theme, polar: polar, origin: origin, categories: categories, domain: domain, range: range, scale: scale, horizontal: horizontal, padding: padding,
        standalone: false
      };
    }
  }, {
    key: "getColorScale",
    value: function getColorScale(props, child) {
      var role = child.type && child.type.role;
      var colorScaleOptions = child.props.colorScale || props.colorScale;
      if (role !== "group" && role !== "stack") {
        return undefined;
      }
      return props.theme && props.theme.group ? colorScaleOptions || props.theme.group.colorScale : colorScaleOptions;
    }
  }, {
    key: "getDataWithOffset",
    value: function getDataWithOffset(props, defaultDataset, offset) {
      var dataset = props.data || props.y ? _victoryCore.Data.getData(props) : defaultDataset;
      var xOffset = offset || 0;
      return dataset.map(function (datum) {
        var _x1 = datum._x instanceof Date ? new Date(datum._x.getTime() + xOffset) : datum._x + xOffset;

        return (0, _assign3.default)({}, datum, { _x1: _x1 });
      });
    }

    // the old ones were bad

  }, {
    key: "getNewChildren",
    value: function getNewChildren(props, childComponents, calculatedProps) {
      var _this2 = this;

      var datasets = calculatedProps.datasets;
      var labelComponent = props.labelComponent,
          polar = props.polar;

      var childProps = this.getChildProps(props, calculatedProps);
      var getAnimationProps = _wrapper2.default.getAnimationProps.bind(this);

      return childComponents.map(function (child, index) {
        var role = child.type && child.type.role;
        var xOffset = polar ? _this2.getPolarX0(props, calculatedProps, index) : _this2.getX0(props, calculatedProps, index);
        var style = role === "voronoi" || role === "tooltip" || role === "label" ? child.props.style : _wrapper2.default.getChildStyle(child, index, calculatedProps);
        var labels = props.labels ? _this2.getLabels(props, datasets, index) : child.props.labels;
        return _react2.default.cloneElement(child, (0, _assign3.default)({
          labels: labels, style: style, key: index,
          data: _this2.getDataWithOffset(props, datasets[index], xOffset),
          animate: getAnimationProps(props, child, index),
          colorScale: _this2.getColorScale(props, child),
          labelComponent: labelComponent || child.props.labelComponent,
          xOffset: role === "stack" ? xOffset : undefined
        }, childProps));
      });
    }
  }, {
    key: "renderContainer",
    value: function renderContainer(containerComponent, props) {
      var containerProps = (0, _defaults3.default)({}, containerComponent.props, props);
      return _react2.default.cloneElement(containerComponent, containerProps);
    }
  }, {
    key: "getContainerProps",
    value: function getContainerProps(props, calculatedProps) {
      var width = props.width,
          height = props.height,
          standalone = props.standalone,
          theme = props.theme,
          polar = props.polar;
      var domain = calculatedProps.domain,
          scale = calculatedProps.scale,
          style = calculatedProps.style,
          origin = calculatedProps.origin;

      return {
        domain: domain, scale: scale, width: width, height: height, standalone: standalone, theme: theme, style: style.parent, polar: polar, origin: origin
      };
    }
  }, {
    key: "getStyle",
    value: function getStyle(theme, style, role) {
      var defaultStyle = theme && theme[role] && theme[role].style ? theme[role].style : {};
      return _victoryCore.Helpers.getStyles(style, defaultStyle);
    }
  }, {
    key: "render",
    value: function render() {
      var role = this.constructor.role;

      var props = this.state && this.state.nodesWillExit ? this.state.oldProps || this.props : this.props;
      var modifiedProps = _victoryCore.Helpers.modifyProps(props, fallbackProps, role);
      var eventKey = modifiedProps.eventKey,
          containerComponent = modifiedProps.containerComponent,
          standalone = modifiedProps.standalone,
          groupComponent = modifiedProps.groupComponent,
          externalEventMutations = modifiedProps.externalEventMutations;

      var childComponents = _react2.default.Children.toArray(modifiedProps.children);
      var calculatedProps = this.getCalculatedProps(modifiedProps, childComponents);
      var newChildren = this.getNewChildren(modifiedProps, childComponents, calculatedProps);
      var containerProps = standalone ? this.getContainerProps(modifiedProps, calculatedProps) : {};
      var container = standalone ? this.renderContainer(containerComponent, containerProps) : groupComponent;
      if (this.events) {
        return _react2.default.createElement(
          _victoryCore.VictorySharedEvents,
          {
            container: container,
            eventKey: eventKey,
            events: this.events,
            externalEventMutations: externalEventMutations
          },
          newChildren
        );
      }
      return _react2.default.cloneElement(container, container.props, newChildren);
    }
  }]);

  return VictoryGroup;
}(_react2.default.Component);

VictoryGroup.displayName = "VictoryGroup";
VictoryGroup.role = "group";
VictoryGroup.propTypes = _extends({}, _commonProps.BaseProps, _commonProps.DataProps, {
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),
  color: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
  colorScale: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.oneOf(["grayscale", "qualitative", "heatmap", "warm", "cool", "red", "green", "blue"])]),
  horizontal: _propTypes2.default.bool,
  offset: _propTypes2.default.number
});
VictoryGroup.defaultProps = {
  containerComponent: _react2.default.createElement(_victoryCore.VictoryContainer, null),
  groupComponent: _react2.default.createElement("g", null),
  samples: 50,
  scale: "linear",
  sortOrder: "ascending",
  standalone: true,
  theme: _victoryCore.VictoryTheme.grayscale
};
VictoryGroup.expectedComponents = ["groupComponent", "containerComponent", "labelComponent"];
VictoryGroup.getDomain = _wrapper2.default.getDomain.bind(_wrapper2.default);
VictoryGroup.getData = _wrapper2.default.getData.bind(_wrapper2.default);
exports.default = VictoryGroup;