Object.defineProperty(exports, "__esModule", {
  value: true
});

var _partialRight2 = require("lodash/partialRight");

var _partialRight3 = _interopRequireDefault(_partialRight2);

var _assign2 = require("lodash/assign");

var _assign3 = _interopRequireDefault(_assign2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _victoryCore = require("victory-core");

var _helperMethods = require("./helper-methods");

var _commonProps = require("../../helpers/common-props");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var fallbackProps = {
  width: 450,
  height: 300,
  padding: 50
};

var animationWhitelist = ["style", "domain", "range", "tickCount", "tickValues", "padding", "width", "height"];

var options = {
  components: [{ name: "axis", index: 0 }, { name: "axisLabel", index: 0 }, { name: "grid" }, { name: "parent", index: "parent" }, { name: "ticks" }, { name: "tickLabels" }]
};

var VictoryPolarAxis = function (_React$Component) {
  _inherits(VictoryPolarAxis, _React$Component);

  function VictoryPolarAxis() {
    _classCallCheck(this, VictoryPolarAxis);

    return _possibleConstructorReturn(this, (VictoryPolarAxis.__proto__ || Object.getPrototypeOf(VictoryPolarAxis)).apply(this, arguments));
  }

  _createClass(VictoryPolarAxis, [{
    key: "renderAxisLine",
    value: function renderAxisLine(props) {
      var dependentAxis = props.dependentAxis;

      var axisComponent = dependentAxis ? props.axisComponent : props.circularAxisComponent;
      var axisProps = this.getComponentProps(axisComponent, "axis", 0);
      return _react2.default.cloneElement(axisComponent, axisProps);
    }
  }, {
    key: "renderLabel",
    value: function renderLabel(props) {
      var axisLabelComponent = props.axisLabelComponent,
          dependentAxis = props.dependentAxis,
          label = props.label;

      if (!label || !dependentAxis) {
        return null;
      }
      var axisLabelProps = this.getComponentProps(axisLabelComponent, "axisLabel", 0);
      return _react2.default.cloneElement(axisLabelComponent, axisLabelProps);
    }
  }, {
    key: "renderAxis",
    value: function renderAxis(props) {
      var _this2 = this;

      var tickComponent = props.tickComponent,
          tickLabelComponent = props.tickLabelComponent;

      var axisType = props.dependentAxis ? "radial" : "angular";
      var gridComponent = axisType === "radial" ? props.circularGridComponent : props.gridComponent;
      var tickComponents = this.dataKeys.map(function (key, index) {
        var tickProps = (0, _assign3.default)({ key: "tick-" + key }, _this2.getComponentProps(tickComponent, "ticks", index));
        return _react2.default.cloneElement(tickComponent, tickProps);
      });

      var gridComponents = this.dataKeys.map(function (key, index) {
        var gridProps = (0, _assign3.default)({ key: "grid-" + key }, _this2.getComponentProps(gridComponent, "grid", index));
        return _react2.default.cloneElement(gridComponent, gridProps);
      });

      var tickLabelComponents = this.dataKeys.map(function (key, index) {
        var tickLabelProps = (0, _assign3.default)({ key: "tick-" + key }, _this2.getComponentProps(tickLabelComponent, "tickLabels", index));
        return _react2.default.cloneElement(tickLabelComponent, tickLabelProps);
      });
      var axis = this.renderAxisLine(props);
      var axisLabel = this.renderLabel(props);
      var children = [axis, axisLabel].concat(_toConsumableArray(tickComponents), _toConsumableArray(gridComponents), _toConsumableArray(tickLabelComponents));
      return this.renderGroup(props, children);
    }

    // Overridden in victory-native

  }, {
    key: "renderGroup",
    value: function renderGroup(props, children) {
      var groupComponent = props.groupComponent;

      var groupComponentProps = groupComponent.props || {};
      var origin = _victoryCore.Helpers.getPolarOrigin(props);
      var transform = groupComponentProps.transform || "translate(" + origin.x + ", " + origin.y + ")";
      return _react2.default.cloneElement(groupComponent, { transform: transform }, children);
    }
  }, {
    key: "shouldAnimate",
    value: function shouldAnimate() {
      return !!this.props.animate;
    }
  }, {
    key: "render",
    value: function render() {
      var props = _victoryCore.Helpers.modifyProps(this.props, fallbackProps, "axis");
      if (this.shouldAnimate()) {
        return this.animateComponent(props, animationWhitelist);
      }
      var children = this.renderAxis(props);
      return props.standalone ? this.renderContainer(props.containerComponent, children) : children;
    }
  }]);

  return VictoryPolarAxis;
}(_react2.default.Component);

VictoryPolarAxis.displayName = "VictoryAxis";
VictoryPolarAxis.role = "axis";
VictoryPolarAxis.defaultTransitions = {
  onExit: {
    duration: 500
  },
  onEnter: {
    duration: 500
  }
};
VictoryPolarAxis.propTypes = _extends({}, _commonProps.BaseProps, {
  axisAngle: _propTypes2.default.number,
  axisComponent: _propTypes2.default.element,
  axisLabelComponent: _propTypes2.default.element,
  axisValue: _propTypes2.default.number,
  categories: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.shape({
    x: _propTypes2.default.arrayOf(_propTypes2.default.string), y: _propTypes2.default.arrayOf(_propTypes2.default.string)
  })]),
  circularAxisComponent: _propTypes2.default.element,
  circularGridComponent: _propTypes2.default.element,
  containerComponent: _propTypes2.default.element,
  dependentAxis: _propTypes2.default.bool,
  endAngle: _propTypes2.default.number,
  events: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    target: _propTypes2.default.oneOf(["axis", "axisLabel", "grid", "ticks", "tickLabels"]),
    eventKey: _propTypes2.default.oneOfType([_propTypes2.default.array, _victoryCore.PropTypes.allOfType([_victoryCore.PropTypes.integer, _victoryCore.PropTypes.nonNegative]), _propTypes2.default.string]),
    eventHandlers: _propTypes2.default.object
  })),
  gridComponent: _propTypes2.default.element,
  innerRadius: _victoryCore.PropTypes.nonNegative,
  labelPlacement: _propTypes2.default.oneOf(["parallel", "perpendicular", "vertical"]),
  startAngle: _propTypes2.default.number,
  stringMap: _propTypes2.default.object,
  style: _propTypes2.default.shape({
    parent: _propTypes2.default.object, axis: _propTypes2.default.object, axisLabel: _propTypes2.default.object,
    grid: _propTypes2.default.object, ticks: _propTypes2.default.object, tickLabels: _propTypes2.default.object
  }),
  tickComponent: _propTypes2.default.element,
  tickCount: _victoryCore.PropTypes.allOfType([_victoryCore.PropTypes.integer, _victoryCore.PropTypes.greaterThanZero]),
  tickFormat: _propTypes2.default.oneOfType([_propTypes2.default.func, _victoryCore.PropTypes.homogeneousArray]),
  tickLabelComponent: _propTypes2.default.element,
  tickValues: _victoryCore.PropTypes.homogeneousArray
});
VictoryPolarAxis.defaultProps = {
  axisComponent: _react2.default.createElement(_victoryCore.Grid, { type: "axis" }),
  axisLabelComponent: _react2.default.createElement(_victoryCore.VictoryLabel, null),
  circularAxisComponent: _react2.default.createElement(_victoryCore.Arc, { type: "axis" }),
  circularGridComponent: _react2.default.createElement(_victoryCore.Arc, { type: "grid" }),
  containerComponent: _react2.default.createElement(_victoryCore.VictoryContainer, null),
  endAngle: 360,
  gridComponent: _react2.default.createElement(_victoryCore.Grid, { type: "grid" }),
  groupComponent: _react2.default.createElement("g", { role: "presentation" }),
  labelPlacement: "parallel",
  scale: "linear",
  startAngle: 0,
  standalone: true,
  theme: _victoryCore.VictoryTheme.grayscale,
  tickComponent: _react2.default.createElement(_victoryCore.Grid, { type: "tick" }),
  tickLabelComponent: _react2.default.createElement(_victoryCore.VictoryLabel, null)
};
VictoryPolarAxis.getDomain = _helperMethods.getDomain;
VictoryPolarAxis.getAxis = _helperMethods.getAxis;
VictoryPolarAxis.getScale = _helperMethods.getScale;
VictoryPolarAxis.getStyles = (0, _partialRight3.default)(_helperMethods.getStyles, fallbackProps.style);
VictoryPolarAxis.getBaseProps = (0, _partialRight3.default)(_helperMethods.getBaseProps, fallbackProps);
VictoryPolarAxis.expectedComponents = ["axisComponent", "circularAxisComponent", "groupComponent", "containerComponent", "tickComponent", "tickLabelComponent", "gridComponent", "circularGridComponent"];
exports.default = (0, _victoryCore.addEvents)(VictoryPolarAxis, options);