import _isFunction from "lodash/isFunction";
import _defaultsDeep from "lodash/defaultsDeep";
import _defaults from "lodash/defaults";
import _assign from "lodash/assign";

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import Axis from "../../helpers/axis";
import { Helpers, Scale, Domain } from "victory-core";

var orientationSign = {
  top: -1,
  left: -1,
  right: 1,
  bottom: 1
};

export default {
  evaluateProp: function (prop, data, index) {
    return _isFunction(prop) ? prop(data, index) : prop;
  },
  evaluateStyle: function (style, data, index) {
    var _this = this;

    if (!style || !Object.keys(style).some(function (value) {
      return _isFunction(style[value]);
    })) {
      return style;
    }
    return Object.keys(style).reduce(function (prev, curr) {
      prev[curr] = _this.evaluateProp(style[curr], data, index);
      return prev;
    }, {});
  },


  // exposed for use by VictoryChart
  getDomain: function (props, axis) {
    var inherentAxis = this.getAxis(props);
    if (axis && axis !== inherentAxis) {
      return undefined;
    }
    var domain = void 0;
    if (Array.isArray(props.domain)) {
      domain = props.domain;
    } else if (props.domain && props.domain[inherentAxis]) {
      domain = props.domain[inherentAxis];
    } else if (Array.isArray(props.tickValues) && props.tickValues.length > 1) {
      domain = Domain.getDomainFromTickValues(props, axis);
    }
    var paddedDomain = Domain.padDomain(domain, props, inherentAxis);
    return domain ? Domain.cleanDomain(paddedDomain, props, inherentAxis) : undefined;
  },


  // exposed for use by VictoryChart
  getAxis: function (props, flipped) {
    if (props.orientation) {
      var vertical = { top: "x", bottom: "x", left: "y", right: "y" };
      return vertical[props.orientation];
    }
    var axisType = props.dependentAxis ? "dependent" : "independent";
    var flippedAxis = { dependent: "x", independent: "y" };
    var normalAxis = { independent: "x", dependent: "y" };
    return flipped ? flippedAxis[axisType] : normalAxis[axisType];
  },


  // exposed for use by VictoryChart
  getScale: function (props) {
    var axis = this.getAxis(props);
    var scale = Scale.getBaseScale(props, axis);
    var domain = this.getDomain(props) || scale.domain();
    scale.range(Helpers.getRange(props, axis));
    scale.domain(domain);
    return scale;
  },
  getStyleObject: function (props) {
    var theme = props.theme,
        dependentAxis = props.dependentAxis;

    var generalAxisStyle = theme && theme.axis && theme.axis.style;
    var axisType = dependentAxis ? "dependentAxis" : "independentAxis";
    var specificAxisStyle = theme && theme[axisType] && theme[axisType].style;

    return generalAxisStyle && specificAxisStyle ? _defaultsDeep({}, specificAxisStyle, generalAxisStyle) : specificAxisStyle || generalAxisStyle;
  },
  getStyles: function (props, styleObject) {
    var style = props.style || {};
    styleObject = styleObject || {};
    var parentStyleProps = { height: "100%", width: "100%" };
    return {
      parent: _defaults(style.parent, styleObject.parent, parentStyleProps),
      axis: _defaults({}, style.axis, styleObject.axis),
      axisLabel: _defaults({}, style.axisLabel, styleObject.axisLabel),
      grid: _defaults({}, style.grid, styleObject.grid),
      ticks: _defaults({}, style.ticks, styleObject.ticks),
      tickLabels: _defaults({}, style.tickLabels, styleObject.tickLabels)
    };
  },
  getTickProps: function (layout, style, datum) {
    var position = layout.position,
        transform = layout.transform;

    return {
      x1: transform.x,
      y1: transform.y,
      x2: transform.x + position.x2,
      y2: transform.y + position.y2,
      style: style,
      datum: datum
    };
  },
  getTickLabelProps: function (layout, style, anchors, datum, text) {
    // eslint-disable-line max-params
    var position = layout.position,
        transform = layout.transform;

    return {
      style: style,
      x: transform.x + position.x,
      y: transform.y + position.y,
      verticalAnchor: anchors.verticalAnchor,
      textAnchor: anchors.textAnchor,
      angle: style.angle,
      text: text,
      datum: datum
    };
  },
  getGridProps: function (layout, style, datum) {
    var edge = layout.edge,
        transform = layout.transform;

    return {
      type: "grid",
      x1: transform.x,
      y1: transform.y,
      x2: edge.x + transform.x,
      y2: edge.y + transform.y,
      style: style,
      datum: datum
    };
  },
  getAxisProps: function (modifiedProps, calculatedValues, globalTransform) {
    var style = calculatedValues.style,
        padding = calculatedValues.padding,
        isVertical = calculatedValues.isVertical;
    var width = modifiedProps.width,
        height = modifiedProps.height;

    return {
      type: "axis",
      style: style.axis,
      x1: isVertical ? globalTransform.x : padding.left + globalTransform.x,
      x2: isVertical ? globalTransform.x : width - padding.right + globalTransform.x,
      y1: isVertical ? padding.top + globalTransform.y : globalTransform.y,
      y2: isVertical ? height - padding.bottom + globalTransform.y : globalTransform.y
    };
  },
  getLayoutProps: function (modifiedProps, calculatedValues) {
    var offset = this.getOffset(modifiedProps, calculatedValues);
    return {
      globalTransform: this.getTransform(modifiedProps, calculatedValues, offset),
      gridOffset: this.getGridOffset(modifiedProps, calculatedValues, offset),
      gridEdge: this.getGridEdge(modifiedProps, calculatedValues)
    };
  },
  getEvaluatedStyles: function (style, tick, index) {
    return {
      tickStyle: this.evaluateStyle(style.ticks, tick, index),
      labelStyle: this.evaluateStyle(style.tickLabels, tick, index),
      gridStyle: this.evaluateStyle(style.grid, tick, index)
    };
  },
  getRole: function (props) {
    if (props.dependentAxis) {
      return props.theme && props.theme.dependentAxis ? "dependentAxis" : "axis";
    }

    return props.theme && props.theme.independentAxis ? "independentAxis" : "axis";
  },
  getShallowMergedThemeProps: function (props, role) {
    var axisTheme = props.theme.axis || {};
    return _defaults({}, props.theme[role], axisTheme);
  },
  modifyProps: function (props, fallbackProps, role) {
    if (role !== "axis") {
      props.theme[role] = this.getShallowMergedThemeProps(props, role);
    }
    return Helpers.modifyProps(props, fallbackProps, role);
  },
  getBaseProps: function (props, fallbackProps) {
    var _this2 = this;

    var role = this.getRole(props);
    props = this.modifyProps(props, fallbackProps, role);
    var calculatedValues = this.getCalculatedValues(props);
    var axis = calculatedValues.axis,
        style = calculatedValues.style,
        orientation = calculatedValues.orientation,
        isVertical = calculatedValues.isVertical,
        scale = calculatedValues.scale,
        ticks = calculatedValues.ticks,
        tickFormat = calculatedValues.tickFormat,
        anchors = calculatedValues.anchors,
        domain = calculatedValues.domain,
        stringTicks = calculatedValues.stringTicks;

    var otherAxis = axis === "x" ? "y" : "x";
    var _props = props,
        width = _props.width,
        height = _props.height,
        standalone = _props.standalone,
        theme = _props.theme,
        polar = _props.polar,
        padding = _props.padding;

    var _getLayoutProps = this.getLayoutProps(props, calculatedValues),
        globalTransform = _getLayoutProps.globalTransform,
        gridOffset = _getLayoutProps.gridOffset,
        gridEdge = _getLayoutProps.gridEdge;

    var sharedProps = { scale: _defineProperty({}, axis, scale), polar: polar };
    var axisProps = this.getAxisProps(props, calculatedValues, globalTransform);
    var axisLabelProps = this.getAxisLabelProps(props, calculatedValues, globalTransform);
    var initialChildProps = {
      parent: _assign({ style: style.parent, ticks: ticks, standalone: standalone, theme: theme, width: width, height: height, padding: padding, domain: domain }, sharedProps)
    };
    var gridProps = {
      dimension: otherAxis,
      range: _defineProperty({}, otherAxis, Helpers.getRange(props, otherAxis)),
      scale: props.scale && props.scale[otherAxis] ? _defineProperty({}, otherAxis, props.scale[otherAxis]) : undefined
    };
    return ticks.reduce(function (childProps, tick, index) {
      var originalTick = stringTicks ? stringTicks[index] : tick;
      var styles = _this2.getEvaluatedStyles(style, originalTick, index);
      var tickLayout = {
        position: _this2.getTickPosition(styles, orientation, isVertical),
        transform: _this2.getTickTransform(scale(tick), globalTransform, isVertical)
      };

      var gridLayout = {
        edge: gridEdge,
        transform: {
          x: isVertical ? -gridOffset.x + globalTransform.x : scale(tick) + globalTransform.x,
          y: isVertical ? scale(tick) + globalTransform.y : gridOffset.y + globalTransform.y
        }
      };
      childProps[index] = {
        axis: _assign({ dimension: axis }, sharedProps, axisProps),
        axisLabel: _assign({}, sharedProps, axisLabelProps),
        ticks: _assign({}, sharedProps, _this2.getTickProps(tickLayout, styles.tickStyle, tick)),
        tickLabels: _assign({}, sharedProps, _this2.getTickLabelProps(tickLayout, styles.labelStyle, anchors, tick, tickFormat(tick, index, ticks))),
        grid: _assign({}, sharedProps, gridProps, _this2.getGridProps(gridLayout, styles.gridStyle, tick))
      };
      return childProps;
    }, initialChildProps);
  },
  getCalculatedValues: function (props) {
    var defaultStyles = this.getStyleObject(props);
    var style = this.getStyles(props, defaultStyles);
    var padding = Helpers.getPadding(props);
    var orientation = props.orientation || (props.dependentAxis ? "left" : "bottom");
    var isVertical = Helpers.isVertical(props);
    var labelPadding = this.getLabelPadding(props, style);
    var stringTicks = Helpers.stringTicks(props) ? props.tickValues : undefined;
    var axis = this.getAxis(props);
    var scale = this.getScale(props);
    var domain = this.getDomain(props);
    var ticks = Axis.getTicks(props, scale, props.crossAxis);
    var tickFormat = Axis.getTickFormat(props, scale);
    var anchors = this.getAnchors(orientation, isVertical);

    return {
      axis: axis, style: style, padding: padding, orientation: orientation, isVertical: isVertical, labelPadding: labelPadding, stringTicks: stringTicks,
      anchors: anchors, scale: scale, ticks: ticks, tickFormat: tickFormat, domain: domain
    };
  },
  getAxisLabelProps: function (props, calculatedValues, globalTransform) {
    var style = calculatedValues.style,
        orientation = calculatedValues.orientation,
        padding = calculatedValues.padding,
        labelPadding = calculatedValues.labelPadding,
        isVertical = calculatedValues.isVertical;

    var sign = orientationSign[orientation];
    var hPadding = padding.left + padding.right;
    var vPadding = padding.top + padding.bottom;
    var verticalAnchor = sign < 0 ? "end" : "start";
    var labelStyle = style.axisLabel;
    var angle = isVertical ? -90 : 0; // eslint-disable-line no-magic-numbers
    var x = isVertical ? globalTransform.x + sign * labelPadding : (props.width - hPadding) / 2 + padding.left + globalTransform.x;
    var y = isVertical ? (props.height - vPadding) / 2 + padding.top + globalTransform.y : sign * labelPadding + globalTransform.y;

    return {
      x: x,
      y: y,
      verticalAnchor: labelStyle.verticalAnchor || verticalAnchor,
      textAnchor: labelStyle.textAnchor || "middle",
      angle: labelStyle.angle || angle,
      style: labelStyle,
      text: props.label
    };
  },
  getAnchors: function (orientation, isVertical) {
    var anchorOrientation = { top: "end", left: "end", right: "start", bottom: "start" };
    var anchor = anchorOrientation[orientation];
    return {
      textAnchor: isVertical ? anchor : "middle",
      verticalAnchor: isVertical ? "middle" : anchor
    };
  },
  getLabelPadding: function (props, style) {
    var labelStyle = style.axisLabel || {};
    if (typeof labelStyle.padding !== "undefined" && labelStyle.padding !== null) {
      return labelStyle.padding;
    }
    var isVertical = Helpers.isVertical(props);
    // TODO: magic numbers
    /*eslint-disable no-magic-numbers*/
    var fontSize = labelStyle.fontSize || 14;
    return props.label ? fontSize * (isVertical ? 2.3 : 1.6) : 0;
    /*eslint-enable no-magic-numbers*/
  },
  getOffset: function (props, calculatedValues) {
    var _this3 = this;

    var style = calculatedValues.style,
        padding = calculatedValues.padding,
        isVertical = calculatedValues.isVertical,
        orientation = calculatedValues.orientation,
        labelPadding = calculatedValues.labelPadding,
        stringTicks = calculatedValues.stringTicks,
        ticks = calculatedValues.ticks;

    var xPadding = orientation === "right" ? padding.right : padding.left;
    var yPadding = orientation === "top" ? padding.top : padding.bottom;
    var fontSize = style.axisLabel.fontSize || 14; // eslint-disable-line no-magic-numbers
    var offsetX = props.offsetX !== null && props.offsetX !== undefined ? props.offsetX : xPadding;
    var offsetY = props.offsetY !== null && props.offsetY !== undefined ? props.offsetY : yPadding;
    var tickSizes = ticks.map(function (data) {
      var tick = stringTicks ? props.tickValues[data - 1] : data;
      var tickStyle = _this3.evaluateStyle(style.ticks, tick);
      return tickStyle.size || 0;
    });
    var totalPadding = fontSize + 2 * Math.max.apply(Math, _toConsumableArray(tickSizes)) + labelPadding;
    var minimumPadding = 1.2 * fontSize; // eslint-disable-line no-magic-numbers
    var x = isVertical ? totalPadding : minimumPadding;
    var y = isVertical ? minimumPadding : totalPadding;
    return {
      x: offsetX !== null && offsetX !== undefined ? offsetX : x,
      y: offsetY !== null && offsetY !== undefined ? offsetY : y
    };
  },
  getTransform: function (props, calculatedValues, offset) {
    var orientation = calculatedValues.orientation;

    return {
      top: { x: 0, y: offset.y },
      bottom: { x: 0, y: props.height - offset.y },
      left: { x: offset.x, y: 0 },
      right: { x: props.width - offset.x, y: 0 }
    }[orientation];
  },
  getTickPosition: function (style, orientation, isVertical) {
    var tickStyle = style.tickStyle,
        labelStyle = style.labelStyle;

    var size = tickStyle.size || 0;
    var tickPadding = tickStyle.padding || 0;
    var labelPadding = labelStyle.padding || 0;
    var tickSpacing = size + tickPadding + labelPadding;
    var sign = orientationSign[orientation];
    return {
      x: isVertical ? sign * tickSpacing : 0,
      x2: isVertical ? sign * size : 0,
      y: isVertical ? 0 : sign * tickSpacing,
      y2: isVertical ? 0 : sign * size
    };
  },
  getTickTransform: function (tick, globalTransform, isVertical) {
    return {
      x: isVertical ? globalTransform.x : tick + globalTransform.x,
      y: isVertical ? tick + globalTransform.y : globalTransform.y
    };
  },
  getGridEdge: function (props, calculatedValues) {
    var orientation = calculatedValues.orientation,
        padding = calculatedValues.padding,
        isVertical = calculatedValues.isVertical;

    var sign = -orientationSign[orientation];
    var x = isVertical ? sign * (props.width - (padding.left + padding.right)) : 0;
    var y = isVertical ? 0 : sign * (props.height - (padding.top + padding.bottom));
    return { x: x, y: y };
  },
  getGridOffset: function (props, calculatedValues, offset) {
    var padding = calculatedValues.padding,
        orientation = calculatedValues.orientation;

    var xPadding = orientation === "right" ? padding.right : padding.left;
    var yPadding = orientation === "top" ? padding.top : padding.bottom;
    return {
      x: props.crossAxis ? offset.x - xPadding : 0,
      y: props.crossAxis ? offset.y - yPadding : 0
    };
  }
};