function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

import Axis from "../../helpers/axis";
import Wrapper from "../../helpers/wrapper";
import React from "react";
import { Collection, Log } from "victory-core";

var getDataComponents = function (childComponents) {
  var findDataComponents = function (children) {
    return children.reduce(function (memo, child) {
      if (child.type && child.type.role === "axis") {
        return memo;
      } else if (child.props && child.props.children) {
        return memo.concat(findDataComponents(React.Children.toArray(child.props.children)));
      }
      return memo.concat(child);
    }, []);
  };

  return findDataComponents(childComponents);
};

var getChildComponents = function (props, defaultAxes) {
  var childComponents = React.Children.toArray(props.children);
  if (childComponents.length === 0) {
    return [defaultAxes.independent, defaultAxes.dependent];
  }

  var axisComponents = {
    dependent: Axis.getAxisComponentsWithParent(childComponents, "dependent"),
    independent: Axis.getAxisComponentsWithParent(childComponents, "independent")
  };

  if (axisComponents.dependent.length === 0 && axisComponents.independent.length === 0) {
    return childComponents.concat([defaultAxes.independent, defaultAxes.dependent]);
  }
  if (axisComponents.independent.length > 1) {
    var msg = "Only one independent VictoryAxis component is allowed when " + "using the VictoryChart wrapper. Only the first axis will be used. Please compose " + "multi-axis charts manually";
    Log.warn(msg);
    var dataComponents = getDataComponents(childComponents);
    return Collection.removeUndefined(dataComponents.concat([].concat(_toConsumableArray(axisComponents.dependent), [axisComponents.independent[0]])));
  }
  return childComponents;
};

var getDefaultDomainPadding = function (childComponents, horizontal) {
  var groupComponent = childComponents.filter(function (child) {
    return child.type && child.type.role && child.type.role === "group-wrapper";
  });

  if (groupComponent.length < 1) {
    return undefined;
  }

  var _groupComponent$0$pro = groupComponent[0].props,
      offset = _groupComponent$0$pro.offset,
      children = _groupComponent$0$pro.children;

  return horizontal ? { y: offset * children.length / 2 } : { x: offset * children.length / 2 };
};

var getDomain = function (props, axis, childComponents) {
  childComponents = childComponents || React.Children.toArray(props.children);
  var domain = Wrapper.getDomain(props, axis, childComponents);
  var axisComponent = Axis.getAxisComponent(childComponents, axis);
  var invertDomain = axisComponent && axisComponent.props && axisComponent.props.invertAxis;
  return invertDomain ? domain.concat().reverse() : domain;
};

// eslint-disable-next-line complexity
var getAxisOffset = function (props, calculatedProps) {
  var axisComponents = calculatedProps.axisComponents,
      scale = calculatedProps.scale,
      origin = calculatedProps.origin,
      domain = calculatedProps.domain,
      originSign = calculatedProps.originSign,
      padding = calculatedProps.padding;
  var top = padding.top,
      bottom = padding.bottom,
      left = padding.left,
      right = padding.right;
  // make the axes line up, and cross when appropriate

  var axisOrientations = {
    x: Axis.getOrientation(axisComponents.x, "x", originSign.y),
    y: Axis.getOrientation(axisComponents.y, "y", originSign.x)
  };
  var orientationOffset = {
    y: axisOrientations.x === "bottom" ? bottom : top,
    x: axisOrientations.y === "left" ? left : right
  };
  var originOffset = {
    x: axisOrientations.y === "left" ? 0 : props.width,
    y: axisOrientations.x === "bottom" ? props.height : 0
  };
  var originPosition = {
    x: origin.x === domain.x[0] || origin.x === domain.x[1] ? 0 : scale.x(origin.x),
    y: origin.y === domain.y[0] || origin.y === domain.y[1] ? 0 : scale.y(origin.y)
  };
  var calculatedOffset = {
    x: originPosition.x ? Math.abs(originOffset.x - originPosition.x) : orientationOffset.x,
    y: originPosition.y ? Math.abs(originOffset.y - originPosition.y) : orientationOffset.y
  };

  return {
    x: axisComponents.x && axisComponents.x.offsetX !== undefined ? axisComponents.x.offsetX : calculatedOffset.x,
    y: axisComponents.y && axisComponents.y.offsetY !== undefined ? axisComponents.y.offsetY : calculatedOffset.y
  };
};

var createStringMap = function (props, axis, childComponents) {
  var allStrings = Wrapper.getStringsFromChildren(props, axis, childComponents);
  return allStrings.length === 0 ? null : allStrings.reduce(function (memo, string, index) {
    memo[string] = index + 1;
    return memo;
  }, {});
};

export { getDomain, getAxisOffset, getDataComponents, getChildComponents, getDefaultDomainPadding, createStringMap };