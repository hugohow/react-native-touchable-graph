import _defaults from "lodash/defaults";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropTypes from "prop-types";
import React from "react";
import { Helpers, VictorySharedEvents, VictoryContainer, VictoryTheme, Scale, PropTypes as CustomPropTypes } from "victory-core";
import VictoryAxis from "../victory-axis/victory-axis";
import VictoryPolarAxis from "../victory-polar-axis/victory-polar-axis";
import { getDomain, getAxisOffset, getChildComponents, getDefaultDomainPadding, createStringMap } from "./helper-methods";
import Axis from "../../helpers/axis";
import Wrapper from "../../helpers/wrapper";
import { BaseProps } from "../../helpers/common-props";

var fallbackProps = {
  width: 450,
  height: 300,
  padding: 50
};

var VictoryChart = function (_React$Component) {
  _inherits(VictoryChart, _React$Component);

  function VictoryChart(props) {
    _classCallCheck(this, VictoryChart);

    var _this = _possibleConstructorReturn(this, (VictoryChart.__proto__ || Object.getPrototypeOf(VictoryChart)).call(this, props));

    _this.state = {};
    if (props.animate) {
      _this.state = {
        nodesShouldLoad: false,
        nodesDoneLoad: false,
        animating: true
      };
    }
    _this.setAnimationState = Wrapper.setAnimationState.bind(_this);
    _this.events = Wrapper.getAllEvents(props);
    return _this;
  }

  _createClass(VictoryChart, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.events = Wrapper.getAllEvents(this.props);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.animate) {
        this.setAnimationState(this.props, nextProps);
      }
      this.events = Wrapper.getAllEvents(nextProps);
    }
  }, {
    key: "getStyles",
    value: function getStyles(props) {
      var styleProps = props.style && props.style.parent;
      return {
        parent: _defaults({}, styleProps, {
          height: "100%",
          width: "100%",
          userSelect: "none"
        }) };
    }
  }, {
    key: "getAxisProps",
    value: function getAxisProps(child, props, calculatedProps) {
      var domain = calculatedProps.domain,
          scale = calculatedProps.scale,
          originSign = calculatedProps.originSign,
          stringMap = calculatedProps.stringMap,
          categories = calculatedProps.categories,
          horizontal = calculatedProps.horizontal;

      var childProps = child.props || {};
      var axis = child.type.getAxis(childProps);
      var currentAxis = Axis.getCurrentAxis(axis, horizontal);
      var otherAxis = axis === "x" ? "y" : "x";
      var axisOffset = getAxisOffset(props, calculatedProps);
      var offsetY = axis === "y" ? undefined : axisOffset.y;
      var offsetX = axis === "x" ? undefined : axisOffset.x;
      var crossAxis = childProps.crossAxis === false ? false : true;
      var orientation = Axis.getOrientation(child, axis, originSign[otherAxis]);
      return {
        stringMap: stringMap[currentAxis],
        categories: categories[currentAxis],
        startAngle: props.startAngle,
        endAngle: props.endAngle,
        innerRadius: props.innerRadius,
        domain: domain,
        scale: scale,
        offsetY: childProps.offsetY !== undefined ? childProps.offsetY : offsetY,
        offsetX: childProps.offsetX !== undefined ? childProps.offsetX : offsetX,
        crossAxis: crossAxis,
        orientation: orientation
      };
    }
  }, {
    key: "getChildProps",
    value: function getChildProps(child, props, calculatedProps) {
      var axisChild = Axis.findAxisComponents([child]);
      if (axisChild.length > 0) {
        return this.getAxisProps(axisChild[0], props, calculatedProps);
      }
      var categories = calculatedProps.categories,
          domain = calculatedProps.domain,
          range = calculatedProps.range,
          scale = calculatedProps.scale;

      return { categories: categories, domain: domain, range: range, scale: scale };
    }
  }, {
    key: "getCalculatedProps",
    value: function getCalculatedProps(props, childComponents) {
      var style = this.getStyles(props);
      var horizontal = childComponents.some(function (component) {
        return component.props && component.props.horizontal;
      });
      var axisComponents = {
        x: Axis.getAxisComponent(childComponents, "x"),
        y: Axis.getAxisComponent(childComponents, "y")
      };
      var domain = {
        x: getDomain(props, "x", childComponents),
        y: getDomain(props, "y", childComponents)
      };
      var range = {
        x: props.polar ? Helpers.getPolarRange(props, "x") : Helpers.getRange(props, "x"),
        y: props.polar ? Helpers.getPolarRange(props, "y") : Helpers.getRange(props, "y")
      };
      var baseScale = {
        x: Scale.getScaleFromProps(props, "x") || axisComponents.x && axisComponents.x.type.getScale(axisComponents.x.props) || Scale.getDefaultScale(),
        y: Scale.getScaleFromProps(props, "y") || axisComponents.y && axisComponents.y.type.getScale(axisComponents.y.props) || Scale.getDefaultScale()
      };
      var scale = {
        x: baseScale.x.domain(domain.x).range(range.x),
        y: baseScale.y.domain(domain.y).range(range.y)
      };

      var origin = props.polar ? Helpers.getPolarOrigin(props) : Axis.getOrigin(domain);

      var originSign = {
        x: Axis.getOriginSign(origin.x, domain.x),
        y: Axis.getOriginSign(origin.y, domain.y)
      };

      // TODO: check
      var categories = {
        x: Wrapper.getCategories(props, "x", childComponents),
        y: Wrapper.getCategories(props, "y", childComponents)
      };

      var stringMap = {
        x: createStringMap(props, "x", childComponents),
        y: createStringMap(props, "y", childComponents)
      };

      var defaultDomainPadding = getDefaultDomainPadding(childComponents, horizontal);

      var padding = Helpers.getPadding(props);

      return {
        axisComponents: axisComponents, categories: categories, domain: domain, range: range, horizontal: horizontal, scale: scale, stringMap: stringMap,
        style: style, origin: origin, originSign: originSign, defaultDomainPadding: defaultDomainPadding, padding: padding
      };
    }
  }, {
    key: "getNewChildren",
    value: function getNewChildren(props, childComponents, calculatedProps) {
      var _this2 = this;

      var baseStyle = calculatedProps.style.parent;
      var getAnimationProps = Wrapper.getAnimationProps.bind(this);
      var height = props.height,
          polar = props.polar,
          theme = props.theme,
          width = props.width;
      var origin = calculatedProps.origin;

      return childComponents.map(function (child, index) {
        var style = Array.isArray(child.props.style) ? child.props.style : _defaults({}, child.props.style, { parent: baseStyle });
        var childProps = _this2.getChildProps(child, props, calculatedProps);
        var newProps = _defaults({
          height: height, polar: polar, theme: theme, width: width, style: style,
          origin: polar ? origin : undefined,
          animate: getAnimationProps(props, child, index),
          padding: calculatedProps.padding,
          key: index,
          standalone: false
        }, childProps);

        return React.cloneElement(child, newProps);
      });
    }
  }, {
    key: "renderContainer",
    value: function renderContainer(containerComponent, props) {
      var containerProps = _defaults({}, containerComponent.props, props);
      return React.cloneElement(containerComponent, containerProps);
    }
  }, {
    key: "getContainerProps",
    value: function getContainerProps(props, calculatedProps) {
      var width = props.width,
          height = props.height,
          standalone = props.standalone,
          theme = props.theme,
          polar = props.polar;
      var domain = calculatedProps.domain,
          scale = calculatedProps.scale,
          style = calculatedProps.style,
          origin = calculatedProps.origin,
          radius = calculatedProps.radius;

      return {
        domain: domain, scale: scale, width: width, height: height, standalone: standalone, theme: theme, style: style.parent, polar: polar, radius: radius,
        origin: polar ? origin : undefined
      };
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.state && this.state.nodesWillExit ? this.state.oldProps || this.props : this.props;
      var modifiedProps = Helpers.modifyProps(props, fallbackProps, "chart");
      var eventKey = modifiedProps.eventKey,
          containerComponent = modifiedProps.containerComponent,
          groupComponent = modifiedProps.groupComponent,
          standalone = modifiedProps.standalone,
          externalEventMutations = modifiedProps.externalEventMutations;

      var axes = props.polar ? modifiedProps.defaultPolarAxes : modifiedProps.defaultAxes;
      var childComponents = getChildComponents(modifiedProps, axes);
      var calculatedProps = this.getCalculatedProps(modifiedProps, childComponents);
      var newChildren = this.getNewChildren(modifiedProps, childComponents, calculatedProps);
      var containerProps = standalone ? this.getContainerProps(modifiedProps, calculatedProps) : {};
      var container = standalone ? this.renderContainer(containerComponent, containerProps) : groupComponent;
      if (this.events) {
        return React.createElement(
          VictorySharedEvents,
          {
            container: container,
            eventKey: eventKey,
            events: this.events,
            externalEventMutations: externalEventMutations
          },
          newChildren
        );
      }
      return React.cloneElement(container, container.props, newChildren);
    }
  }]);

  return VictoryChart;
}(React.Component);

VictoryChart.displayName = "VictoryChart";
VictoryChart.propTypes = _extends({}, BaseProps, {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),
  defaultAxes: PropTypes.shape({
    independent: PropTypes.element,
    dependent: PropTypes.element
  }),
  defaultPolarAxes: PropTypes.shape({
    independent: PropTypes.element,
    dependent: PropTypes.element
  }),
  endAngle: PropTypes.number,
  innerRadius: CustomPropTypes.nonNegative,
  startAngle: PropTypes.number
});
VictoryChart.defaultProps = {
  containerComponent: React.createElement(VictoryContainer, null),
  defaultAxes: {
    independent: React.createElement(VictoryAxis, null),
    dependent: React.createElement(VictoryAxis, { dependentAxis: true })
  },
  defaultPolarAxes: {
    independent: React.createElement(VictoryPolarAxis, null),
    dependent: React.createElement(VictoryPolarAxis, { dependentAxis: true })
  },
  groupComponent: React.createElement("g", null),
  standalone: true,
  theme: VictoryTheme.grayscale
};
VictoryChart.expectedComponents = ["groupComponent", "containerComponent"];
export default VictoryChart;