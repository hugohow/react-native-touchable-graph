import _defaults from "lodash/defaults";
import _assign from "lodash/assign";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropTypes from "prop-types";
import React from "react";
import { Helpers, VictorySharedEvents, VictoryContainer, VictoryTheme, Scale } from "victory-core";
import Wrapper from "../../helpers/wrapper";
import { BaseProps } from "../../helpers/common-props";

var fallbackProps = {
  width: 450,
  height: 300,
  padding: 50
};

var VictoryStack = function (_React$Component) {
  _inherits(VictoryStack, _React$Component);

  function VictoryStack(props) {
    _classCallCheck(this, VictoryStack);

    var _this = _possibleConstructorReturn(this, (VictoryStack.__proto__ || Object.getPrototypeOf(VictoryStack)).call(this, props));

    if (props.animate) {
      _this.state = {
        nodesShouldLoad: false,
        nodesDoneLoad: false,
        animating: true
      };
      _this.setAnimationState = Wrapper.setAnimationState.bind(_this);
      _this.events = Wrapper.getAllEvents(props);
    }
    return _this;
  }

  _createClass(VictoryStack, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.events = Wrapper.getAllEvents(this.props);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.animate) {
        this.setAnimationState(this.props, nextProps);
      }
      this.events = Wrapper.getAllEvents(nextProps);
    }
  }, {
    key: "getCalculatedProps",
    value: function getCalculatedProps(props, childComponents) {
      var role = this.constructor.role;

      var style = this.getStyle(props.theme, props.style, role);
      var horizontal = props.horizontal || childComponents.every(function (component) {
        return component.props.horizontal;
      });
      var dataFromChildren = Wrapper.getDataFromChildren(props);
      var datasets = Wrapper.fillInMissingData(props, dataFromChildren);
      var domain = {
        x: Wrapper.getStackedDomain(props, "x", datasets),
        y: Wrapper.getStackedDomain(props, "y", datasets)
      };
      var range = {
        x: Helpers.getRange(props, "x"),
        y: Helpers.getRange(props, "y")
      };
      var baseScale = {
        x: Scale.getScaleFromProps(props, "x") || Scale.getDefaultScale(),
        y: Scale.getScaleFromProps(props, "y") || Scale.getDefaultScale()
      };
      var xScale = baseScale.x.domain(domain.x).range(range.x);
      var yScale = baseScale.y.domain(domain.y).range(range.y);
      var scale = {
        x: horizontal ? yScale : xScale,
        y: horizontal ? xScale : yScale
      };
      var categories = {
        x: Wrapper.getCategories(props, "x"),
        y: Wrapper.getCategories(props, "y")
      };
      var colorScale = props.colorScale;
      return { datasets: datasets, categories: categories, range: range, domain: domain, horizontal: horizontal, scale: scale, style: style, colorScale: colorScale, role: role };
    }

    /* eslint-disable max-params, no-nested-ternary */

  }, {
    key: "addLayoutData",
    value: function addLayoutData(props, calculatedProps, datasets, index) {
      var xOffset = props.xOffset || 0;
      return datasets[index].map(function (datum) {
        var yOffset = Wrapper.getY0(datum, index, calculatedProps) || 0;
        return _assign({}, datum, {
          _y0: !(datum._y instanceof Date) ? yOffset : yOffset ? new Date(yOffset) : datum._y,
          _y1: datum._y === null ? null : datum._y instanceof Date ? new Date(+datum._y + +yOffset) : datum._y + yOffset,
          _x1: datum._x === null ? null : datum._x instanceof Date ? new Date(+datum._x + +xOffset) : datum._x + xOffset
        });
      });
    }
    /* eslint-enable max-params, no-nested-ternary */

  }, {
    key: "getLabels",
    value: function getLabels(props, datasets, index) {
      if (!props.labels) {
        return undefined;
      }
      return datasets.length === index + 1 ? props.labels : undefined;
    }
  }, {
    key: "getChildProps",
    value: function getChildProps(props, calculatedProps) {
      var categories = calculatedProps.categories,
          domain = calculatedProps.domain,
          range = calculatedProps.range,
          scale = calculatedProps.scale,
          horizontal = calculatedProps.horizontal;

      return {
        height: props.height,
        width: props.width,
        padding: Helpers.getPadding(props),
        standalone: false,
        theme: props.theme,
        categories: categories,
        domain: domain,
        range: range,
        scale: scale,
        horizontal: horizontal
      };
    }
  }, {
    key: "getColorScale",
    value: function getColorScale(props, child) {
      var role = child.type && child.type.role;
      var colorScaleOptions = child.props.colorScale || props.colorScale;
      if (role !== "group" && role !== "stack") {
        return undefined;
      }
      return props.theme ? colorScaleOptions || props.theme.props.colorScale : colorScaleOptions;
    }

    // the old ones were bad

  }, {
    key: "getNewChildren",
    value: function getNewChildren(props, childComponents, calculatedProps) {
      var _this2 = this;

      var datasets = calculatedProps.datasets;

      var childProps = this.getChildProps(props, calculatedProps);
      var getAnimationProps = Wrapper.getAnimationProps.bind(this);

      return childComponents.map(function (child, index) {
        var data = _this2.addLayoutData(props, calculatedProps, datasets, index);
        var style = Wrapper.getChildStyle(child, index, calculatedProps);
        var labels = props.labels ? _this2.getLabels(props, datasets, index) : child.props.labels;

        return React.cloneElement(child, _assign({
          animate: getAnimationProps(props, child, index),
          key: index,
          labels: labels,
          domainPadding: child.props.domainPadding || props.domainPadding,
          theme: props.theme,
          labelComponent: props.labelComponent || child.props.labelComponent,
          style: style,
          colorScale: _this2.getColorScale(props, child),
          data: data,
          polar: props.polar
        }, childProps));
      });
    }
  }, {
    key: "renderContainer",
    value: function renderContainer(containerComponent, props) {
      var containerProps = _defaults({}, containerComponent.props, props);
      return React.cloneElement(containerComponent, containerProps);
    }
  }, {
    key: "getContainerProps",
    value: function getContainerProps(props, calculatedProps) {
      var width = props.width,
          height = props.height,
          standalone = props.standalone,
          theme = props.theme,
          polar = props.polar;
      var domain = calculatedProps.domain,
          scale = calculatedProps.scale,
          style = calculatedProps.style,
          origin = calculatedProps.origin;

      return {
        domain: domain, scale: scale, width: width, height: height, standalone: standalone, theme: theme, style: style.parent, polar: polar, origin: origin
      };
    }
  }, {
    key: "getStyle",
    value: function getStyle(theme, style, role) {
      var defaultStyle = theme && theme[role] && theme[role].style ? theme[role].style : {};
      return Helpers.getStyles(style, defaultStyle);
    }
  }, {
    key: "render",
    value: function render() {
      var role = this.constructor.role;

      var props = this.state && this.state.nodesWillExit ? this.state.oldProps || this.props : this.props;
      var modifiedProps = Helpers.modifyProps(props, fallbackProps, role);
      var eventKey = modifiedProps.eventKey,
          containerComponent = modifiedProps.containerComponent,
          standalone = modifiedProps.standalone,
          groupComponent = modifiedProps.groupComponent,
          externalEventMutations = modifiedProps.externalEventMutations;

      var childComponents = React.Children.toArray(modifiedProps.children);
      var calculatedProps = this.getCalculatedProps(modifiedProps, childComponents);
      var newChildren = this.getNewChildren(modifiedProps, childComponents, calculatedProps);
      var containerProps = standalone ? this.getContainerProps(modifiedProps, calculatedProps) : {};
      var container = standalone ? this.renderContainer(containerComponent, containerProps) : groupComponent;
      if (this.events) {
        return React.createElement(
          VictorySharedEvents,
          {
            container: container,
            eventKey: eventKey,
            events: this.events,
            externalEventMutations: externalEventMutations
          },
          newChildren
        );
      }

      return React.cloneElement(container, container.props, newChildren);
    }
  }]);

  return VictoryStack;
}(React.Component);

VictoryStack.displayName = "VictoryStack";
VictoryStack.role = "stack";
VictoryStack.propTypes = _extends({}, BaseProps, {
  categories: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.shape({
    x: PropTypes.arrayOf(PropTypes.string), y: PropTypes.arrayOf(PropTypes.string)
  })]),
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),
  colorScale: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.oneOf(["grayscale", "qualitative", "heatmap", "warm", "cool", "red", "green", "blue"])]),
  fillInMissingData: PropTypes.bool,
  horizontal: PropTypes.bool,
  labelComponent: PropTypes.element,
  labels: PropTypes.oneOfType([PropTypes.func, PropTypes.array]),
  style: PropTypes.shape({
    parent: PropTypes.object, data: PropTypes.object, labels: PropTypes.object
  }),
  xOffset: PropTypes.number
});
VictoryStack.defaultProps = {
  containerComponent: React.createElement(VictoryContainer, null),
  groupComponent: React.createElement("g", null),
  scale: "linear",
  standalone: true,
  theme: VictoryTheme.grayscale,
  fillInMissingData: true
};
VictoryStack.expectedComponents = ["groupComponent", "containerComponent", "labelComponent"];
VictoryStack.getDomain = Wrapper.getStackedDomain.bind(Wrapper);
VictoryStack.getData = Wrapper.getData.bind(Wrapper);
export default VictoryStack;