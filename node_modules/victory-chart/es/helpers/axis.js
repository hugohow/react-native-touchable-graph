import _without from "lodash/without";
import _includes from "lodash/includes";
import _values from "lodash/values";
import _sortBy from "lodash/sortBy";
import _range from "lodash/range";
import _uniq from "lodash/uniq";
import _invert from "lodash/invert";
import _isFunction from "lodash/isFunction";
import _identity from "lodash/identity";

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

import { Collection } from "victory-core";

import React from "react";

export default {
  /**
   * Returns the axis (x or y) of a particular axis component
   * @param {Object} props: the props object.
   * @returns {String} the dimension appropriate for the axis given its props
   */
  getAxis: function (props) {
    if (props.orientation) {
      var vertical = { top: "x", bottom: "x", left: "y", right: "y" };
      return vertical[props.orientation];
    }
    return props.dependentAxis ? "y" : "x";
  },


  /**
   * Returns the given axis or the opposite axis when horizontal
   * @param {string} axis: the given axis, either "x" pr "y"
   * @param {Boolean} horizontal: true when the chart is flipped to the horizontal orientation
   * @returns {String} the dimension appropriate for the axis given its props "x" or "y"
   */
  getCurrentAxis: function (axis, horizontal) {
    var otherAxis = axis === "x" ? "y" : "x";
    return horizontal ? otherAxis : axis;
  },


  /**
   * Returns a single axis component of the desired axis type (x or y)
   * @param {Array} childComponents: an array of children
   * @param {String} axis: desired axis either "x" or "y".
   * @returns {ReactComponent} an axis component of the desired axis or undefined
   */
  getAxisComponent: function (childComponents, axis) {
    var matchesAxis = function (component) {
      var type = component.type.getAxis(component.props);
      return type === axis;
    };
    return this.findAxisComponents(childComponents, matchesAxis)[0];
  },


  /**
   * Returns all axis components that pass a given predicate
   * @param {Array} childComponents: an array of children
   * @param {Function} predicate: a predicate function that will be called with each
   * @returns {Array} all axis components that pass the given predicate or []
   */
  findAxisComponents: function (childComponents, predicate) {
    predicate = predicate || _identity;
    var findAxes = function (children) {
      return children.reduce(function (memo, child) {
        if (child.type && child.type.role === "axis" && predicate(child)) {
          return memo.concat(child);
        } else if (child.props && child.props.children) {
          return memo.concat(findAxes(React.Children.toArray(child.props.children)));
        }
        return memo;
      }, []);
    };

    return findAxes(childComponents);
  },


  /**
   * Returns all axis components of the desired axis type (x or y) along with any
   * parent components excluding VictoryChart
   * @param {Array} childComponents: an optional array of children.
   * @param {String} type: desired axis either "dependent" or "independent".
   * @returns {ReactComponent} an axis component of the desired type or undefined
   */
  getAxisComponentsWithParent: function (childComponents, type) {
    var matchesType = function (child) {
      return type === "dependent" ? child.props.dependentAxis : !child.props.dependentAxis;
    };

    var findAxisComponents = function (children) {
      return children.reduce(function (memo, child) {
        if (child.type && child.type.role === "axis" && matchesType(child)) {
          return memo.concat(child);
        } else if (child.props && child.props.children) {
          var childAxis = findAxisComponents(React.Children.toArray(child.props.children));
          return childAxis.length > 0 ? memo.concat(child) : memo;
        }
        return memo;
      }, []);
    };

    return findAxisComponents(childComponents);
  },
  getOrigin: function (domain) {
    var getSingleOrigin = function (d) {
      var domainMin = Math.min.apply(Math, _toConsumableArray(d));
      var domainMax = Math.max.apply(Math, _toConsumableArray(d));
      return domainMax < 0 ? domainMax : Math.max(0, domainMin);
    };

    return {
      x: Collection.containsDates(domain.x) ? new Date(Math.min.apply(Math, _toConsumableArray(domain.x))) : getSingleOrigin(domain.x),
      y: Collection.containsDates(domain.y) ? new Date(Math.min.apply(Math, _toConsumableArray(domain.y))) : getSingleOrigin(domain.y)
    };
  },
  getOriginSign: function (origin, domain) {
    var getSign = function () {
      return origin <= 0 && Math.max.apply(Math, _toConsumableArray(domain)) <= 0 ? "negative" : "positive";
    };
    return Collection.containsDates(domain) ? "positive" : getSign();
  },


  /**
   * @param {ReactComponent} component: a victory axis component.
   * @param {String} axis: desired axis either "x" or "y".
   * @param {String} originSign: "positive" or "negative"
   * @returns {String} the orientation of the axis ("top", "bottom", "left", or "right")
   */
  getOrientation: function (component, axis, originSign) {
    if (component && component.props && component.props.orientation) {
      return component.props.orientation;
    }
    var sign = originSign || "positive";
    var typicalOrientations = {
      positive: { x: "bottom", y: "left" },
      negative: { x: "top", y: "right" }
    };
    var flippedOrientations = {
      positive: { x: "left", y: "bottom" },
      negative: { x: "right", y: "top" }
    };
    if (!component) {
      return typicalOrientations[sign][axis];
    }
    var dependent = component.props.dependentAxis;
    return !dependent && axis === "y" || dependent && axis === "x" ? flippedOrientations[sign][axis] : typicalOrientations[sign][axis];
  },


  /**
   * @param {Object} props: axis component props
   * @returns {Boolean} true when the axis is vertical
   */
  isVertical: function (props) {
    var orientation = props.orientation || (props.dependentAxis ? "left" : "bottom");
    var vertical = { top: false, bottom: false, left: true, right: true };
    return vertical[orientation];
  },


  /**
   * @param {Object} props: axis component props
   * @returns {Boolean} true when tickValues contain strings
   */
  stringTicks: function (props) {
    return props.tickValues !== undefined && Collection.containsStrings(props.tickValues);
  },
  getDefaultTickFormat: function (props) {
    var tickValues = props.tickValues,
        stringMap = props.stringMap;

    var fallbackFormat = tickValues && !Collection.containsDates(tickValues) ? function (x) {
      return x;
    } : undefined;
    if (!stringMap) {
      return this.stringTicks(props) ? function (x, index) {
        return tickValues[index];
      } : fallbackFormat;
    } else {
      var invertedStringMap = stringMap && _invert(stringMap);
      var tickValueArray = _sortBy(_values(stringMap), function (n) {
        return n;
      });
      var dataNames = tickValueArray.map(function (tick) {
        return invertedStringMap[tick];
      });
      // string ticks should have one tick of padding at the beginning
      var dataTicks = [""].concat(_toConsumableArray(dataNames), [""]);
      return function (x) {
        return dataTicks[x];
      };
    }
  },
  getTickFormat: function (props, scale) {
    var tickFormat = props.tickFormat,
        stringMap = props.stringMap;

    if (!tickFormat) {
      var defaultTickFormat = this.getDefaultTickFormat(props);
      var scaleTickFormat = scale.tickFormat && _isFunction(scale.tickFormat) ? scale.tickFormat() : function (x) {
        return x;
      };
      return defaultTickFormat || scaleTickFormat;
    } else if (tickFormat && Array.isArray(tickFormat)) {
      return function (x, index) {
        return tickFormat[index];
      };
    } else if (tickFormat && _isFunction(tickFormat)) {
      var applyStringTicks = function (tick, index, ticks) {
        var invertedStringMap = _invert(stringMap);
        var stringTickArray = ticks.map(function (t) {
          return invertedStringMap[t];
        });
        return props.tickFormat(invertedStringMap[tick], index, stringTickArray);
      };
      return stringMap ? applyStringTicks : tickFormat;
    } else {
      return function (x) {
        return x;
      };
    }
  },
  getStringTicks: function (props) {
    var stringMap = props.stringMap;

    var axis = this.getAxis(props);
    var categories = Array.isArray(props.categories) ? props.categories : props.categories && props.categories[axis];
    var ticksFromCategories = categories && Collection.containsOnlyStrings(categories) ? categories.map(function (tick) {
      return stringMap[tick];
    }) : undefined;
    var ticksFromStringMap = stringMap && _values(stringMap);
    return ticksFromCategories && ticksFromCategories.length !== 0 ? ticksFromCategories : ticksFromStringMap;
  },
  getTickArray: function (props) {
    var _this = this;

    var tickValues = props.tickValues,
        tickFormat = props.tickFormat,
        stringMap = props.stringMap;

    var getTicksFromFormat = function () {
      if (!tickFormat || !Array.isArray(tickFormat)) {
        return undefined;
      }
      return Collection.containsStrings(tickFormat) ? tickFormat.map(function (t, i) {
        return i;
      }) : tickFormat;
    };

    var ticks = tickValues;
    if (stringMap) {
      ticks = this.getStringTicks(props);
    }
    if (tickValues && Collection.containsStrings(tickValues)) {
      ticks = stringMap ? tickValues.map(function (tick) {
        return stringMap[tick];
      }) : _range(1, tickValues.length + 1);
    }
    var tickArray = ticks ? _uniq(ticks) : getTicksFromFormat(props);
    var filterArray = function (arr) {
      var axis = _this.getAxis(props);
      var domain = props.domain && props.domain[axis] || props.domain;
      return Array.isArray(domain) ? arr.filter(function (t) {
        return t >= Math.min.apply(Math, _toConsumableArray(domain)) && t <= Math.max.apply(Math, _toConsumableArray(domain));
      }) : arr;
    };
    return Array.isArray(tickArray) && tickArray.length ? filterArray(tickArray) : undefined;
  },
  downsampleTicks: function (ticks, tickCount) {
    if (!tickCount || !Array.isArray(ticks) || ticks.length <= tickCount) {
      return ticks;
    }
    var k = Math.floor(ticks.length / tickCount);
    return ticks.filter(function (d, i) {
      return i % k === 0;
    });
  },
  getTicks: function (props, scale, filterZero) {
    var tickCount = props.tickCount;

    var tickValues = this.getTickArray(props);
    if (tickValues) {
      return this.downsampleTicks(tickValues, tickCount);
    } else if (scale.ticks && _isFunction(scale.ticks)) {
      // eslint-disable-next-line no-magic-numbers
      var defaultTickCount = tickCount || 5;
      var scaleTicks = scale.ticks(defaultTickCount);
      var tickArray = Array.isArray(scaleTicks) && scaleTicks.length ? scaleTicks : scale.domain();
      var ticks = this.downsampleTicks(tickArray, tickCount);
      if (filterZero) {
        var filteredTicks = _includes(ticks, 0) ? _without(ticks, 0) : ticks;
        return filteredTicks.length ? filteredTicks : ticks;
      }
      return ticks;
    }
    return scale.domain();
  }
};